{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/react/react-three/react-three/src/three.js\";\nimport React, { Fragment } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nvar controls, renderer, scene, camera;\nvar A = 52;\nvar B = 52;\nvar C = 52;\nvar w = Window.innerWidth;\nvar h = Window.innerHeight;\n\nconst Three = () => {\n  const init = () => {\n    scene = new THREE.Scene(); // scene.background = new THREE.Color(0xffffff);\n\n    scene.background = new THREE.Color(0x000000); //The smaller the first number is, the closer the cube appears\n\n    camera = new THREE.PerspectiveCamera(50, w / h, 1, 5000);\n    camera.position.x = 0;\n    camera.position.y = 0;\n    camera.position.z = 800;\n    const axesHelper = new THREE.AxesHelper(100);\n    scene.add(axesHelper);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube); //* Webgl Render\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(w, h);\n    document.getElementById('webgl').append(renderer.domElement); //* The mouse controls.\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.minZoom = 0.5;\n    controls.maxZoom = 10;\n  };\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, init(), animate());\n};\n\nexport default Three;","map":{"version":3,"sources":["/Users/mac/Documents/react/react-three/react-three/src/three.js"],"names":["React","Fragment","THREE","OrbitControls","controls","renderer","scene","camera","A","B","C","w","Window","innerWidth","h","innerHeight","Three","init","Scene","background","Color","PerspectiveCamera","position","x","y","z","axesHelper","AxesHelper","add","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","document","getElementById","append","domElement","minZoom","maxZoom","animate","requestAnimationFrame","update","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA,IAAIC,QAAJ,EAAcC,QAAd,EAAwBC,KAAxB,EAA+BC,MAA/B;AACA,IAAIC,CAAC,GAAG,EAAR;AACA,IAAIC,CAAC,GAAG,EAAR;AACA,IAAIC,CAAC,GAAG,EAAR;AACA,IAAIC,CAAC,GAAGC,MAAM,CAACC,UAAf;AACA,IAAIC,CAAC,GAAGF,MAAM,CAACG,WAAf;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAElB,QAAMC,IAAI,GAAG,MAAM;AAGjBX,IAAAA,KAAK,GAAG,IAAIJ,KAAK,CAACgB,KAAV,EAAR,CAHiB,CAIjB;;AACAZ,IAAAA,KAAK,CAACa,UAAN,GAAmB,IAAIjB,KAAK,CAACkB,KAAV,CAAgB,QAAhB,CAAnB,CALiB,CAOjB;;AACAb,IAAAA,MAAM,GAAG,IAAIL,KAAK,CAACmB,iBAAV,CAA4B,EAA5B,EAAgCV,CAAC,GAAGG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C,CAAT;AACAP,IAAAA,MAAM,CAACe,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAhB,IAAAA,MAAM,CAACe,QAAP,CAAgBE,CAAhB,GAAoB,CAApB;AACAjB,IAAAA,MAAM,CAACe,QAAP,CAAgBG,CAAhB,GAAoB,GAApB;AAEA,UAAMC,UAAU,GAAG,IAAIxB,KAAK,CAACyB,UAAV,CAAqB,GAArB,CAAnB;AACArB,IAAAA,KAAK,CAACsB,GAAN,CAAUF,UAAV;AAEA,QAAIG,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAI7B,KAAK,CAAC8B,iBAAV,CAA4B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAIhC,KAAK,CAACiC,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAX;AACAzB,IAAAA,KAAK,CAACsB,GAAN,CAAUM,IAAV,EAnBiB,CAuBjB;;AACA7B,IAAAA,QAAQ,GAAG,IAAIH,KAAK,CAACkC,aAAV,EAAX;AACA/B,IAAAA,QAAQ,CAACgC,aAAT,CAAuBC,MAAM,CAACC,gBAA9B;AACAlC,IAAAA,QAAQ,CAACmC,OAAT,CAAiB7B,CAAjB,EAAoBG,CAApB;AACA2B,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,MAAjC,CAAwCtC,QAAQ,CAACuC,UAAjD,EA3BiB,CA8BjB;;AACAxC,IAAAA,QAAQ,GAAG,IAAID,aAAJ,CAAkBI,MAAlB,EAA0BF,QAAQ,CAACuC,UAAnC,CAAX;AACAxC,IAAAA,QAAQ,CAACyC,OAAT,GAAmB,GAAnB;AACAzC,IAAAA,QAAQ,CAAC0C,OAAT,GAAmB,EAAnB;AACD,GAlCD;;AAoCA,QAAMC,OAAO,GAAG,MAAM;AACpBC,IAAAA,qBAAqB,CAACD,OAAD,CAArB;AACA3C,IAAAA,QAAQ,CAAC6C,MAAT;AACA5C,IAAAA,QAAQ,CAAC6C,MAAT,CAAgB5C,KAAhB,EAAuBC,MAAvB;AACD,GAJD;;AAQA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,IAAI,EADP,EAEG8B,OAAO,EAFV,CADF;AAMD,CApDD;;AAsDA,eAAe/B,KAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nvar controls, renderer, scene, camera;\nvar A = 52;\nvar B = 52;\nvar C = 52;\nvar w = Window.innerWidth;\nvar h = Window.innerHeight;\n\nconst Three = () => {\n\n  const init = () => {\n\n\n    scene = new THREE.Scene();\n    // scene.background = new THREE.Color(0xffffff);\n    scene.background = new THREE.Color(0x000000);\n\n    //The smaller the first number is, the closer the cube appears\n    camera = new THREE.PerspectiveCamera(50, w / h, 1, 5000);\n    camera.position.x = 0;\n    camera.position.y = 0;\n    camera.position.z = 800;\n\n    const axesHelper = new THREE.AxesHelper(100);\n    scene.add(axesHelper)\n\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n\n\n    //* Webgl Render\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(w, h);\n    document.getElementById('webgl').append(renderer.domElement);\n\n\n    //* The mouse controls.\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.minZoom = 0.5;\n    controls.maxZoom = 10;\n  }\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n  }\n\n\n\n  return (\n    <Fragment>\n      {init()}\n      {animate()}\n    </Fragment>\n  )\n};\n\nexport default Three;\n"]},"metadata":{},"sourceType":"module"}